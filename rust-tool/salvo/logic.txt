use std::future::IntoFuture;
use rbatis::{crud, impl_select_page};
use rbatis::rbdc::datetime::DateTime;
use rbatis::sql::PageRequest;
use crate::model::${tableName}::{${className}, ${className}Dto};
use crate::RB;
use common::util::page::{PageParam, PageResult};

const TABLE_NAME: &str = "${table}";

crud!(${className}{},TABLE_NAME);
impl_select_page!(${className}{page(where_str:&str) => "${where_str}"},TABLE_NAME);

pub async fn list(page: PageParam, model: ${className}) -> PageResult<Vec<${className}Dto>> {
    let condition = where_condition(model);
    println!("{condition:?}");
    let result = ${className}::page(
        &mut RB.clone(),
        &PageRequest::new(page.page.unwrap_or(1)
                          , page.size.unwrap_or(10)), &condition).await.unwrap();

    // 记录转换为dto
    let mut list = vec![];
    for item in result.records {
        list.push(${className}Dto::from(item));
    }
    return PageResult {
        total: result.total,
        list,
    };
}

pub async fn update(model: ${className}) {
    let result = ${className}::update_by_column(&mut RB.clone()
                                         , &model, "id").await.unwrap();
    println!("{result:?}")
}

pub async fn delete(ids: Vec<i64>) {
   if ids.len() > 1 || ids[0] == 0 {
        println!("{:?}", "不允许批量删除-或数值为0");
        return;
    }
    let result = ${className}::delete_by_column(&mut RB.clone(), "id"
                                         , ids[0]).await.unwrap();
    println!("{result:?}")
}

pub async fn insert(mut model: ${className}) {
    model.create_time = Some(DateTime::now());
    let result = ${className}::insert(&mut RB.clone(), &model).await.unwrap();
    println!("{result:?}")
}

pub fn where_condition(model: ${className}) -> String {
    let mut where_str = String::from("");
${where}
    if where_str.len() == 0 {
        return "".to_string();
    }
    where_str = where_str[3..where_str.len()].to_string();
    return format!("where{}",where_str)
}